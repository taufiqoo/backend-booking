// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Level {
  idLevel   Int    @id @default(autoincrement())
  nameLevel String
  message   String
  user      User[]
}

model Status {
  idStatus    Int           @id @default(autoincrement())
  nameStatus  String
  user        User[]
  room        Room[]
  customer    Customer[]
  transaction Transaction[]
}

model User {
  idUser       Int    @id @default(autoincrement())
  nameUser     String
  emailUser    String
  passwordUser String
  tlpUser      String
  addressUser  String
  userLevel    Level  @relation(fields: [levelUser], references: [idLevel])
  levelUser    Int
  userStatus   Status @relation(fields: [statusUser], references: [idStatus])
  statusUser   Int
  fotoUser     String
}

model Customer {
  idCustomer      Int           @id @default(autoincrement())
  nameCustomer    String
  nikCustomer     String
  emailCustomer   String
  tlpnCustomer    String
  addressCustomer String
  fotoCustomer    String
  paswordCustomer String
  statusId        Status        @relation(fields: [statusCustomer], references: [idStatus])
  statusCustomer  Int
  transaction     Transaction[]
}

model Floor {
  idFloor   Int    @id @default(autoincrement())
  nameFloor String
  room      Room[]
}

model Category {
  idCategory       Int    @id @default(autoincrement())
  nameCategory     String
  descCategory     String
  facilityCategory String
  price            Float
  room             Room[]
}

model Room {
  idRoom      Int           @id @default(autoincrement())
  categoryId  Int
  floorId     Int
  nameRoom    String
  numberRoom  Int
  statusId    Int
  descRoom    String
  Status      Status?       @relation(fields: [statusId], references: [idStatus])
  Floor       Floor?        @relation(fields: [floorId], references: [idFloor])
  Category    Category?     @relation(fields: [categoryId], references: [idCategory])
  transaction Transaction[]
}

model Transaction {
  idTransaction     Int      @id @default(autoincrement())
  customer          Customer @relation(fields: [customerId], references: [idCustomer])
  customerId        Int
  roomId            Int
  room              Room     @relation(fields: [roomId], references: [idRoom])
  statusTransaction Int
  status            Status   @relation(fields: [statusTransaction], references: [idStatus])
  checkIn           DateTime
  checkOut          DateTime
  day               Int
  people            Int
  booking           DateTime
  statusPayment     Int
  payment           Payment  @relation(fields: [statusPayment], references: [idPayment])
  totalPayment      Int
}

model Payment {
  idPayment     Int           @id @default(autoincrement())
  paymentStatus String
  transaction   Transaction[]
}
